/*! * pyo通用脚本 * * Version 2.0 - bate		20190102 * http://pyo.gs *///获取时间的多功能方法// type 0 || null 时间戳，1 2017-12-12 12:12:12 / 2 2017-12-12 12:12 / 3 12-12 12:12 / 4 12-12 / 5 12:12:12 / 6 12:12 / 7 2017-12-12  / 8 2017-12 / 9 2017年12月12日 12:12:12  / 11 年 2017 / 12 月 12 / 13 日 12// time 初始化时间// diff 返回人性化时间，time必须有值function getTime( type, time, diff ) {    var date = time ? new Date(time*1000) : new Date();    var year = date.getFullYear();    var month = date.getMonth() + 1;    var day = date.getDate();    var hour = date.getHours();    var minute = date.getMinutes();    var second = date.getSeconds();    if ( diff ){        var d_minutes,d_hours,d_days, d,            timeNow = parseInt(new Date().getTime()/1000);        d = timeNow - time;        d_days = parseInt(d/86400);        d_hours = parseInt(d/3600);        d_minutes = parseInt(d/60);        if(d_days > 0 && d_days < 4){            return d_days + "天前";        }else if(d_days <= 0 && d_hours > 0){            return d_hours + "小时前";        }else if(d_hours <= 0 && d_minutes > 0){            return d_minutes + "分钟前";        }else if( d < 60 ){            return '刚刚';        }else{            return getTime( type, time );        }    }else{        switch ( type ){            case 1:                return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute, second].map(formatNumber).join(':');                break;            case 2:                return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute].map(formatNumber).join(':');                break;            case 3:                return [month, day].map(formatNumber).join('-') + ' ' + [hour, minute].map(formatNumber).join(':');                break;            case 4:                return [month, day].map(formatNumber).join('-');                break;            case 5:                return [hour, minute, second].map(formatNumber).join(':');                break;            case 6:                return [hour, minute].map(formatNumber).join(':');                break;            case 7:                return [year, month, day].map(formatNumber).join('-');                break;            case 8:                return [year, month].map(formatNumber).join('-');                break;            case 9:                return year + '年' + month + '月' + day + '日 ' + [hour, minute, second].map(formatNumber).join(':');                break;            case 11:                return year;                break;            case 12:                return month;                break;            case 13:                return day;                break;            default:                return Date.parse( date ) / 1000;                break;        }    }    function formatNumber(n) {        n = n.toString();        return n[1] ? n : '0' + n    }}function getTimeStamp( str, zero_fix ) {    var time,        _str = str.replace(/-/g, '/');    if ( zero_fix ){        _str += ' 00:00:00';    }    time = new Date( _str );    return time.getTime() / 1000}//重新刷新页面，使用location.reload()有可能导致重新提交function reloadPage(win) {    var location = win ? win.location : window.location;    location.href = location.pathname + location.search;}//页面跳转function redirect(url) {    location.href = url;}//格式化文件大小数值function format_size( fileSize ) {    if (fileSize < 1024) {        return fileSize + 'B';    } else if (fileSize < (1024*1024)) {        var temp = fileSize / 1024;        temp = temp.toFixed(2);        return temp + 'KB';    } else if (fileSize < (1024*1024*1024)) {        var temp = fileSize / (1024*1024);        temp = temp.toFixed(2);        return temp + 'MB';    } else {        var temp = fileSize / (1024*1024*1024);        temp = temp.toFixed(2);        return temp + 'GB';    }}//随机打乱数组function shuffle(v){    for(var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);    return v;}//预览图片、视频、音频主方法，依赖 layerfunction file_preview(url) {    var ext, ext_pos,        _max_height = document.documentElement.clientHeight ? ( document.documentElement.clientHeight * 0.75 ) : 800;    if (url == false) {        return false;    }    ext_pos = url.lastIndexOf('.');    ext = url.substring(ext_pos + 1).toLowerCase();    switch (ext) {        case 'gif':        case 'png':        case 'jpg':        case 'jpeg':            var _img = new Image();            var layer_loading = layer.open({type: 2, content: '预览加载中…'});            _img.onload = function(){                layer.close(layer_loading);                layer.open({type: 1, title: false, shadeClose: true, style: ' max-width: 80%;', closeBtn: true, area:['auto','auto'], content: '<div class="text-center" style="font-size: 0; line-height: 0"><img src="' + url + '" style="max-width: 100%; max-height:'+_max_height+'px;" /></div>'});            };            _img.onerror = function(){                layer.close(layer_loading);                layer.open({                    content: '图片加载失败，请确认路径是否正确',skin: 'msg',time: 2                });            };            _img.src = url;            break;        case 'mp4':            layer.open({type: 1, title: false, closeBtn: true, area: '50%', shadeClose: true, skin: 'video_play_box',                content: '<div class="p-a text-center"><video style="max-width: 100%; max-height:'+_max_height+'px;" src="' + url + '" width="100%" autoplay controls="controls" ></video> </div>'            });            break;        case 'ogg':        case 'wav':        case 'wmv':        case 'mp3':            layer.open({                type: 1, title: false, closeBtn: true, shadeClose: true, skin: 'video_play_box',                content: '<div class="p-a text-center"><audio src="' + url + '" width="100%" autoplay controls="controls" ></audio> </div>'            });            break;        default:            layer.open({type: 1, title: false, closeBtn: true, shadeClose: true,                content: '<div class="p-a">该文件不支持预览，请<a href="' + url + '" class="btn btn-primary btn-sm m-l" target="_blank">点击下载</a></div>'            });            break;    }}// in_arrayfunction in_array(searchString,array) {    for (var i=0; i<array.length; i++) {        if ( searchString == array[i] ) return true;    }    return false;}//字符串截取 包含对中文处理function Substr(str, n) {    var len = 0,        tmpStr = "";    if (str.replace(/[\u4e00-\u9fa5]/g, "**").length <= n) {        return str;    }    for (var i = 0; i < str.length; i++) {        if (/[\u4e00-\u9fa5]/.test(str[i])) {            len += 2;        } else {            len += 1;        }        if (len > n) {            break;        } else {            tmpStr += str[i];        }    }    return tmpStr + "...";}//生成随机字符串，默认32位，第二个参数为是否去掉容易混淆的字符oOLl,9gq,Vv,Uu,I1****/function randomString(len , simple) {    len = len || 32;    var $chars = simple ? 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678' : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijlkmnopqrstuvwxyz1234567890';    var maxPos = $chars.length;    var pwd = '';    for (var i = 0; i < len; i++) {        pwd += $chars.charAt(Math.floor(Math.random() * maxPos));    }    return pwd;}function urldecode(encodedString) {    var output = encodedString;    var binVal, thisString;    var myregexp = /(%[^%]{2})/;    function utf8to16(str) {        var out, i, len, c;        var char2, char3;        out = "";        len = str.length;        i = 0;        while(i < len) {            c = str.charCodeAt(i++);            switch(c >> 4) {                case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:                out += str.charAt(i-1);                break;                case 12: case 13:                char2 = str.charCodeAt(i++);                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));                break;                case 14:                    char2 = str.charCodeAt(i++);                    char3 = str.charCodeAt(i++);                    out += String.fromCharCode(((c & 0x0F) << 12) |                        ((char2 & 0x3F) << 6) |                        ((char3 & 0x3F) << 0));                    break;            }        }        return out;    }    while((match = myregexp.exec(output)) != null && match.length > 1 && match[1] != '') {        binVal = parseInt(match[1].substr(1),16);        thisString = String.fromCharCode(binVal);        output = output.replace(match[1], thisString);    }    //output = utf8to16(output);    output = output.replace(/\\+/g, " ");    output = utf8to16(output);    return output;}//检测文本中的http https地址，转换为链接function changeUrl(str){    var reg = /(http:\/\/|https:\/\/)((\w|=|\?|\.|\/|&|-)+)/g;    str= str.replace(reg, "<a href='$1$2'>$1$2</a>");    return str}//列表转tree形式function listToTree(myId,pId,list){    function exists(list, parentId){        for(var i=0; i<list.length; i++){            if (list[i][myId] == parentId) return true;        }        return false;    }    var nodes = [];    // get the top level nodes    for(var i=0; i<list.length; i++){        var row = list[i];        if (!exists(list, row[pId])){            nodes.push(row);        }    }    var toDo = [];    for(var i=0; i<nodes.length; i++){        toDo.push(nodes[i]);    }    while(toDo.length){        var node = toDo.shift(); // the parent node        // get the child nodes        for(var i=0; i<list.length; i++){            var row = list[i];            if (row[pId] == node[myId]){                //var child = {id:row.id,text:row.name};                if (node.child){                    node.child.push(row);                } else {                    node.child = [row];                }                toDo.push(row);            }        }    }    return nodes;}